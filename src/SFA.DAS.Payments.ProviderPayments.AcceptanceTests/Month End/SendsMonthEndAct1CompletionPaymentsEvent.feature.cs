// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.ProviderPayments.AcceptanceTests.MonthEnd
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Month End Stop should send Act1 Completion payment events to Approvals service")]
    public partial class MonthEndStopShouldSendAct1CompletionPaymentEventsToApprovalsServiceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "SendsMonthEndAct1CompletionPaymentsEvent.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Month End", "Month End Stop should send Act1 Completion payment events to Approvals service", "\tAs a Provider \r\n\tI would like to send a message to approvals Team when the month" +
                    " end stop event is received for any completion payments\r\n\tso that approvals team" +
                    " know that a learner has successfully completed their apprenticeship", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("upon month end stop, approvals are notified of any completion payments")]
        [NUnit.Framework.TestCaseAttribute("R01/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R02/Current Academic Year", null)]
        [NUnit.Framework.TestCaseAttribute("R03/Current Academic Year", null)]
        public void UponMonthEndStopApprovalsAreNotifiedOfAnyCompletionPayments(string collection_Period, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Collection_Period", collection_Period);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("upon month end stop, approvals are notified of any completion payments", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("the collection period is {0}", collection_Period), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Contract Type",
                            "Collection Period",
                            "Transaction Type",
                            "Amount"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R02/Current Academic Year",
                            "Learning (TT1)",
                            "1000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R02/Current Academic Year",
                            "Completion (TT2)",
                            "2000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R02/Current Academic Year",
                            "Completion (TT2)",
                            "3500"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R02/Current Academic Year",
                            "Balancing (TT3)",
                            "3000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R02/Current Academic Year",
                            "Learning (TT1)",
                            "4000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R02/Current Academic Year",
                            "Completion (TT2)",
                            "5000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R02/Current Academic Year",
                            "Balancing (TT3)",
                            "6000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R02/Current Academic Year",
                            "First16To18EmployerIncentive (TT4)",
                            "7000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R03/Current Academic Year",
                            "Learning (TT1)",
                            "1000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R03/Current Academic Year",
                            "Completion (TT2)",
                            "2000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R03/Current Academic Year",
                            "Completion (TT2)",
                            "5000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R03/Current Academic Year",
                            "Completion (TT2)",
                            "7000"});
                table9.AddRow(new string[] {
                            "Act1",
                            "R03/Current Academic Year",
                            "Balancing (TT3)",
                            "3000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R03/Current Academic Year",
                            "Learning (TT1)",
                            "4000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R03/Current Academic Year",
                            "Completion (TT2)",
                            "5000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R03/Current Academic Year",
                            "Balancing (TT3)",
                            "6000"});
                table9.AddRow(new string[] {
                            "Act2",
                            "R03/Current Academic Year",
                            "First16To18EmployerIncentive (TT4)",
                            "7000"});
#line 9
 testRunner.And("the funding source service generates the following contract type payments", ((string)(null)), table9, "And ");
#line hidden
#line 28
 testRunner.When("month end stop event is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("DAS approvals service should be notified of payments for learners with completion" +
                        " payments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
